<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1457459693922">{:repl-history {:ide [], :local [&quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :parnter (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      clj-map\n      jsonned)))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :parnter (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      clj-)))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :parnter (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      clj-map)))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :parnter (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      jsonned)))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :partner (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      jsonned)))&quot; &quot;(create-partner-json cig)&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :partner (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      csv)))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n        addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n        external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n        bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n        contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n        unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                         csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n    (let [clj-map (hash-map :partner (merge\n                                       {:addresses (mapper addresses-type csv)}\n                                       {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                       {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                       {:contacts (mapper contacts-type csv)}\n                                       unnested))\n          jsonned (json/generate-string clj-map)]\n      clj-map)))&quot; &quot;(defn create-partner-json\n    [path]\n    (let [csv (csv-in path)\n          addresses-type [:addressType :zip :city :streetAddress :country :poBox :otherAddress]\n          external-identifiers-type [:externalIdentifierType :externalIdentifierValue]\n          bank-account-numbers-type [:bankSwiftCode :number :bankAccountType :isDefault]\n          contacts-type [:contactType :emailAddress :sms :fax :isPrimary :countryCode]\n          unnested (reduce (fn [ret key-to-rmv] (dissoc ret key-to-rmv))\n                           csv (concat addresses-type external-identifiers-type bank-account-numbers-type contacts-type))]\n      (let [clj-map (hash-map :partner (merge\n                                         {:addresses (mapper addresses-type csv)}\n                                         {:externalIdentifiers (mapper external-identifiers-type csv)}\n                                         {:bankAccountNumbers (mapper bank-account-numbers-type csv)}\n                                         {:contacts (mapper contacts-type csv)}\n                                         unnested))\n            jsonned (json/generate-string clj-map)]\n        clj-map)))&quot; &quot;(doc boolean)&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)]\n    :partner {\n              :partnerRef          (:partnerRef csv)\n              :specialType         (:specialType csv)\n              :messageLanguage     (:messageLanguage csv)\n              :isUser              (boolean (:isUser csv))\n              :isAgent             (boolean (:isAgent csv))\n              :isOrgUnit           (boolean (:isOrgUnit csv))\n              :country             (:country csv)\n              :county              (:county csv)\n              :fullName            (:fullName csv)\n              :shortName           (:shortName csv)\n              :companyForm         (:companyForm csv)\n              :externalIdentifiers {[{:externalIdentifierType  (:insuranceCompanyCode csv)\n                                      :externalIdentifierValue (:vatNumber csv)}]}\n              :establishedAt       (:establishedAt csv)\n              :managerName         (:managerName csv)\n              :addresses           {[\n                                     {:addressType   (:addressType csv)\n                                    :addressRef    (:addressRef csv)\n                                    :zip           (:zip csv)\n                                    :city          (:city csv)\n                                    :streetAddress (:streetAddress csv)\n                                    :country       (:country csv)}]}\n              :contacts            {[\n                                     {:phoneNumber  (:phoneNumber csv)\n                                    :fax          (boolean (:fax csv))\n                                    :emailAddress (:emailAddress csv)}]}\n              :bankAccountNumbers  {[\n                                     {:bankAccountRef  (:bankAccountRef csv)\n                                    :number           (:bankAccountNumber csv)\n                                    :bankAccountType (:bankAccountType csv)\n                                    :bankFullName    (:bankFullName csv)\n                                    :bankShortName   (:bankShortName csv)\n                                    :bankAddress     (:bankAddress)\n                                    :bankSwiftCode   (:bankSwiftCode csv)}]}\n              }))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)]\n    :partner {\n              :partnerRef          (:partnerRef csv)\n              :specialType         (:specialType csv)\n              :messageLanguage     (:messageLanguage csv)\n              :isUser              (boolean (:isUser csv))\n              :isAgent             (boolean (:isAgent csv))\n              :isOrgUnit           (boolean (:isOrgUnit csv))\n              :country             (:country csv)\n              :county              (:county csv)\n              :fullName            (:fullName csv)\n              :shortName           (:shortName csv)\n              :companyForm         (:companyForm csv)\n              :externalIdentifiers [{:externalIdentifierType  (:insuranceCompanyCode csv)\n                                      :externalIdentifierValue (:vatNumber csv)}]\n              :establishedAt       (:establishedAt csv)\n              :managerName         (:managerName csv)\n              :addresses           [\n                                     {:addressType   (:addressType csv)\n                                    :addressRef    (:addressRef csv)\n                                    :zip           (:zip csv)\n                                    :city          (:city csv)\n                                    :streetAddress (:streetAddress csv)\n                                    :country       (:country csv)}]\n              :contacts            [\n                                     {:phoneNumber  (:phoneNumber csv)\n                                    :fax          (boolean (:fax csv))\n                                    :emailAddress (:emailAddress csv)}]\n              :bankAccountNumbers  [\n                                     {:bankAccountRef  (:bankAccountRef csv)\n                                    :number           (:bankAccountNumber csv)\n                                    :bankAccountType (:bankAccountType csv)\n                                    :bankFullName    (:bankFullName csv)\n                                    :bankShortName   (:bankShortName csv)\n                                    :bankAddress     (:bankAddress)\n                                    :bankSwiftCode   (:bankSwiftCode csv)}]\n              }))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)]\n    :partner {\n              :partnerRef          (:partnerRef csv)\n              :specialType         (:specialType csv)\n              :messageLanguage     (:messageLanguage csv)\n              :isUser              (boolean (:isUser csv))\n              :isAgent             (boolean (:isAgent csv))\n              :isOrgUnit           (boolean (:isOrgUnit csv))\n              :country             (:country csv)\n              :county              (:county csv)\n              :fullName            (:fullName csv)\n              :shortName           (:shortName csv)\n              :companyForm         (:companyForm csv)\n              :externalIdentifiers [{:externalIdentifierType  (:insuranceCompanyCode csv)\n                                     :externalIdentifierValue (:vatNumber csv)}]\n              :establishedAt       (:establishedAt csv)\n              :managerName         (:managerName csv)\n              :addresses           [\n                                    {:addressType   (:addressType csv)\n                                     :addressRef    (:addressRef csv)\n                                     :zip           (:zip csv)\n                                     :city          (:city csv)\n                                     :streetAddress (:streetAddress csv)\n                                     :country       (:country csv)}]\n              :contacts            [\n                                    {:phoneNumber  (:phoneNumber csv)\n                                     :fax          (boolean (:fax csv))\n                                     :emailAddress (:emailAddress csv)}]\n              :bankAccountNumbers  [\n                                    {:bankAccountRef  (:bankAccountRef csv)\n                                     :number          (:bankAccountNumber csv)\n                                     :bankAccountType (:bankAccountType csv)\n                                     :bankFullName    (:bankFullName csv)\n                                     :bankShortName   (:bankShortName csv)\n                                     :bankAddress     (:bankAddress csv)\n                                     :bankSwiftCode   (:bankSwiftCode csv)}]\n              }))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n    mapped-csv :partner {\n              :partnerRef          (:partnerRef csv)\n              :specialType         (:specialType csv)\n              :messageLanguage     (:messageLanguage csv)\n              :isUser              (boolean (:isUser csv))\n              :isAgent             (boolean (:isAgent csv))\n              :isOrgUnit           (boolean (:isOrgUnit csv))\n              :country             (:country csv)\n              :county              (:county csv)\n              :fullName            (:fullName csv)\n              :shortName           (:shortName csv)\n              :companyForm         (:companyForm csv)\n              :externalIdentifiers [{:externalIdentifierType  (:insuranceCompanyCode csv)\n                                     :externalIdentifierValue (:vatNumber csv)}]\n              :establishedAt       (:establishedAt csv)\n              :managerName         (:managerName csv)\n              :addresses           [\n                                    {:addressType   (:addressType csv)\n                                     :addressRef    (:addressRef csv)\n                                     :zip           (:zip csv)\n                                     :city          (:city csv)\n                                     :streetAddress (:streetAddress csv)\n                                     :country       (:country csv)}]\n              :contacts            [\n                                    {:phoneNumber  (:phoneNumber csv)\n                                     :fax          (boolean (:fax csv))\n                                     :emailAddress (:emailAddress csv)}]\n              :bankAccountNumbers  [\n                                    {:bankAccountRef  (:bankAccountRef csv)\n                                     :number          (:bankAccountNumber csv)\n                                     :bankAccountType (:bankAccountType csv)\n                                     :bankFullName    (:bankFullName csv)\n                                     :bankShortName   (:bankShortName csv)\n                                     :bankAddress     (:bankAddress csv)\n                                     :bankSwiftCode   (:bankSwiftCode csv)}]\n              }]\n    mapped-csv))&quot; &quot;(defn create-partner-json\n  [path]\n  (let [csv (csv-in path)\n    mapped-csv {:partner {\n              :partnerRef          (:partnerRef csv)\n              :specialType         (:specialType csv)\n              :messageLanguage     (:messageLanguage csv)\n              :isUser              (boolean (:isUser csv))\n              :isAgent             (boolean (:isAgent csv))\n              :isOrgUnit           (boolean (:isOrgUnit csv))\n              :country             (:country csv)\n              :county              (:county csv)\n              :fullName            (:fullName csv)\n              :shortName           (:shortName csv)\n              :companyForm         (:companyForm csv)\n              :externalIdentifiers [{:externalIdentifierType  (:insuranceCompanyCode csv)\n                                     :externalIdentifierValue (:vatNumber csv)}]\n              :establishedAt       (:establishedAt csv)\n              :managerName         (:managerName csv)\n              :addresses           [\n                                    {:addressType   (:addressType csv)\n                                     :addressRef    (:addressRef csv)\n                                     :zip           (:zip csv)\n                                     :city          (:city csv)\n                                     :streetAddress (:streetAddress csv)\n                                     :country       (:country csv)}]\n              :contacts            [\n                                    {:phoneNumber  (:phoneNumber csv)\n                                     :fax          (boolean (:fax csv))\n                                     :emailAddress (:emailAddress csv)}]\n              :bankAccountNumbers  [\n                                    {:bankAccountRef  (:bankAccountRef csv)\n                                     :number          (:bankAccountNumber csv)\n                                     :bankAccountType (:bankAccountType csv)\n                                     :bankFullName    (:bankFullName csv)\n                                     :bankShortName   (:bankShortName csv)\n                                     :bankAddress     (:bankAddress csv)\n                                     :bankSwiftCode   (:bankSwiftCode csv)}]\n              }}]\n    mapped-csv))&quot; &quot;(create-partner-json cig-path)&quot; &quot;(json/generate-string (create-partner-json cig-path))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (json/decode-stream resp)))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (json/parse-stream resp)))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (json/parse-stream resp)))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (get-in resp [:body :messages])))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (get-in resp [:body \&quot;messages\&quot;])))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (get-in resp [:body \&quot;\\\&quot;messages\\\&quot;\&quot;])))&quot; &quot;(filter :key1 {:key1 \&quot;val1\&quot; :key2 \&quot;val2\&quot;})&quot; &quot;(take 1(filter :key1 {:key1 \&quot;val1\&quot; :key2 \&quot;val2\&quot;}))&quot; &quot;(filter :key2 {:key1 \&quot;val1\&quot; :key2 \&quot;val2\&quot;})&quot; &quot;(doc filter)&quot; &quot;(filter even? (range 0 100))&quot; &quot;(get :key2 {:key1 \&quot;val1\&quot; :key2 \&quot;val2\&quot;})&quot; &quot;(get {:key1 \&quot;val1\&quot; :key2 \&quot;val2\&quot;} :key1)&quot; &quot;(get {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}} :error)&quot; &quot;(get {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}} :key1)&quot; &quot;(map (fn [map] (get map error)) {:key1 {:error \&quot;X\&quot;} :key2 {:error: \&quot;Y\&quot;}})&quot; &quot;(map (fn [map] (get map error)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(map (fn [map] (get map :error)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(map (fn [map-element] (get map-element :error)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(doc map)&quot; &quot;(doc get)&quot; &quot;(doc value)&quot; &quot;(map (fn [map-element] (get (:'map-element map-element) :error)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;:'map-element&quot; &quot;map-element&quot; &quot;(map (fn [map-element] map-element) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(map (fn [map-element] (key map-element)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(map (fn [map-element] (get map-element)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(map (fn [map-element] (vals map-element)) {:key1 {:error \&quot;X\&quot;} :key2 {:error \&quot;Y\&quot;}})&quot; &quot;(vals {:key1 \&quot;x\&quot; :key2 \&quot;y\&quot;})&quot; &quot;(vals {:key1 {:key3 \&quot;val\&quot;} :key2 {:key4 \&quot;val\&quot;}})&quot; &quot;(defn contains-error?\n  [map]\n  (if (contains? map :error)\n    (:error map)\n    false))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})] \n    (get-in resp [:body :messages])))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        (json/parse-string @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}}))]\n    (get-in resp [:body :messages])))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        (json/parse-string @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}}))]\n    resp))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    resp))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (json/parse-string (get resp body))))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (json/parse-string (get resp :body))))&quot; &quot;(defn create-partner\n  ;;Partner létrehozás\n  [authToken partner-path]\n  (let [resp\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string (create-partner-map partner-path))\n            :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (get (json/parse-string (get resp :body)) \&quot;messages\&quot;)))&quot; &quot;(csv-in cig-path)&quot; &quot;(defn create-partner-map\n  [path]\n  (let [csv (csv-in path)\n        mapped-csv {:partner {\n                              :partnerRef          (:partnerRef csv)\n                              :partnerType         (:partnerType csv)\n                              :specialType         (:specialType csv)\n                              :messageLanguage     (:messageLanguage csv)\n                              :isUser              (boolean (:isUser csv))\n                              :isAgent             (boolean (:isAgent csv))\n                              :isOrgUnit           (boolean (:isOrgUnit csv))\n                              :country             (:country csv)\n                              :county              (:county csv)\n                              :fullName            (:fullName csv)\n                              :shortName           (:shortName csv)\n                              :companyForm         (:companyForm csv)\n                              :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                     :externalIdentifierValue (:vatNumber csv)}\n                                                    {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                     :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                              :establishedAt       (:establishedAt csv)\n                              :managerName         (:managerName csv)\n                              :addresses           [\n                                                    {:addressType   (:addressType csv)\n                                                     :addressRef    (:addressRef csv)\n                                                     :zip           (:zip csv)\n                                                     :city          (:city csv)\n                                                     :streetAddress (:streetAddress csv)\n                                                     :country       (:country csv)}]\n                              :contacts            [\n                                                    {:contactType  (:contactType csv)\n                                                     :phoneNumber  (:phoneNumber csv)\n                                                     :fax          (boolean (:fax csv))\n                                                     :emailAddress (:emailAddress csv)}]\n                              :bankAccountNumbers  [\n                                                    {:bankAccountRef  (:bankAccountRef csv)\n                                                     :number          (:bankAccountNumber csv)\n                                                     :bankAccountType (:bankAccountType csv)\n                                                     :bankFullName    (:bankFullName csv)\n                                                     :bankShortName   (:bankShortName csv)\n                                                     :bankAddress     (:bankAddress csv)\n                                                     :bankSwiftCode   (:bankSwiftCode csv)}]\n                              }}]\n    mapped-csv))&quot; &quot;(create-partner-map cig-path)&quot; &quot;(create-partner korteheni cig-path)&quot; &quot;(create-partner korteheni ober-pathh)&quot; &quot;(defn csv-in\n  [path]\n  ;;egyszintű map a csv-ből\n  (let [[keys &amp; vals] (csv/read-csv (io/reader path))]\n    (map (partial zipmap keys) vals)))&quot; &quot;(doc keywordize)&quot; &quot;(doc key)&quot; &quot;(ns nak-test00.core\n  (:require [org.httpkit.client :as http]\n            [clojure.data.csv :as csv]\n            [cheshire.core :as json]\n            [clojure.core]\n            [clojure.java.io :as io]\n            [clojure.walk :only keywordize-keys])\n  (:gen-class))&quot; &quot;(doc keywordize-keys)&quot; &quot;(doc keyword)&quot; &quot;(keyword \&quot;lol\&quot;)&quot; &quot;(keyword [\&quot;1\&quot; \&quot;2\&quot;])&quot; &quot;(defn csv-in\n  [path]\n  ;;egyszintű map a csv-ből\n  (let [[keys &amp; vals] (csv/read-csv (io/reader path))\n        keys (map keyword keys)]\n    (map (partial zipmap keys) vals)))&quot; &quot;(def partner-model\n  {:partner {\n             :partnerRef          (:partnerRef csv)\n             :partnerType         (:partnerType csv)\n             :specialType         (:specialType csv)\n             :messageLanguage     (:messageLanguage csv)\n             :isUser              (boolean (:isUser csv))\n             :isAgent             (boolean (:isAgent csv))\n             :isOrgUnit           (boolean (:isOrgUnit csv))\n             :country             (:country csv)\n             :county              (:county csv)\n             :fullName            (:fullName csv)\n             :shortName           (:shortName csv)\n             :companyForm         (:companyForm csv)\n             :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                    :externalIdentifierValue (:vatNumber csv)}\n                                   {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                    :externalIdentifierValue (:insuranceCompanyCode csv)}]\n             :establishedAt       (:establishedAt csv)\n             :managerName         (:managerName csv)\n             :addresses           [\n                                   {:addressType   (:addressType csv)\n                                    :addressRef    (:addressRef csv)\n                                    :zip           (:zip csv)\n                                    :city          (:city csv)\n                                    :streetAddress (:streetAddress csv)\n                                    :country       (:country csv)}]\n             :contacts            [\n                                   {:contactType  (:contactType csv)\n                                    :phoneNumber  (:phoneNumber csv)\n                                    :fax          (boolean (:fax csv))\n                                    :emailAddress (:emailAddress csv)}]\n             :bankAccountNumbers  [\n                                   {:bankAccountRef  (:bankAccountRef csv)\n                                    :number          (:bankAccountNumber csv)\n                                    :bankAccountType (:bankAccountType csv)\n                                    :bankFullName    (:bankFullName csv)\n                                    :bankShortName   (:bankShortName csv)\n                                    :bankAddress     (:bankAddress csv)\n                                    :bankSwiftCode   (:bankSwiftCode csv)}]\n             }})&quot; &quot;(create-partner-map ober-path)&quot; &quot;(json/generate-string (create-partner-maps partner-path))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) {} csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (into {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(json/generate-string (create-partner-maps ober-path))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map #((let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string %)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;))) partners)))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map (fn [partner] (let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string partner)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;))) partners)))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map #(let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string %)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;)) partners)))&quot; &quot;(#(+ %1 %2) 5 10)&quot; &quot;(csv-in ober-path)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (:bankAccountNumber csv-element)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(create-partner-maps ober-path)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (:bankAccountNumber csv-element)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(ns nak-test00.core\n  (:require [org.httpkit.client :as http]\n            [clojure.data.csv :as csv]\n            [cheshire.core :as json]\n            [clojure.core]\n            [clojure.java.io :as io]\n            [clojure.walk :only keywordize-keys]\n            [clojure.string :as str :only replace])\n  (:gen-class))&quot; &quot;(create-partner korteheni ober-path)&quot; &quot;partner-csv&quot; &quot;(csv-in \&quot;resources/csv/agents.csv\&quot;)&quot; &quot;(true? nil)&quot; &quot;(csv-in partner-csv)&quot; &quot;(doc cond)&quot; &quot;(type (create-partner-maps partner-csv))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (into {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret))) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }}) ret)) [] csv)]\n    maps))&quot; &quot;(vector \&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(create-partner-maps partner-csv)&quot;], :remote []}}</component>
</project>