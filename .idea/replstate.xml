<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1457645570722">{:repl-history {:ide [], :local [&quot;(def partner-model\n  {:partner {\n             :partnerRef          (:partnerRef csv)\n             :partnerType         (:partnerType csv)\n             :specialType         (:specialType csv)\n             :messageLanguage     (:messageLanguage csv)\n             :isUser              (boolean (:isUser csv))\n             :isAgent             (boolean (:isAgent csv))\n             :isOrgUnit           (boolean (:isOrgUnit csv))\n             :country             (:country csv)\n             :county              (:county csv)\n             :fullName            (:fullName csv)\n             :shortName           (:shortName csv)\n             :companyForm         (:companyForm csv)\n             :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                    :externalIdentifierValue (:vatNumber csv)}\n                                   {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                    :externalIdentifierValue (:insuranceCompanyCode csv)}]\n             :establishedAt       (:establishedAt csv)\n             :managerName         (:managerName csv)\n             :addresses           [\n                                   {:addressType   (:addressType csv)\n                                    :addressRef    (:addressRef csv)\n                                    :zip           (:zip csv)\n                                    :city          (:city csv)\n                                    :streetAddress (:streetAddress csv)\n                                    :country       (:country csv)}]\n             :contacts            [\n                                   {:contactType  (:contactType csv)\n                                    :phoneNumber  (:phoneNumber csv)\n                                    :fax          (boolean (:fax csv))\n                                    :emailAddress (:emailAddress csv)}]\n             :bankAccountNumbers  [\n                                   {:bankAccountRef  (:bankAccountRef csv)\n                                    :number          (:bankAccountNumber csv)\n                                    :bankAccountType (:bankAccountType csv)\n                                    :bankFullName    (:bankFullName csv)\n                                    :bankShortName   (:bankShortName csv)\n                                    :bankAddress     (:bankAddress csv)\n                                    :bankSwiftCode   (:bankSwiftCode csv)}]\n             }})&quot; &quot;(create-partner-map ober-path)&quot; &quot;(json/generate-string (create-partner-maps partner-path))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) {} csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (into {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv)\n                                  :partnerType         (:partnerType csv)\n                                  :specialType         (:specialType csv)\n                                  :messageLanguage     (:messageLanguage csv)\n                                  :isUser              (boolean (:isUser csv))\n                                  :isAgent             (boolean (:isAgent csv))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv))\n                                  :country             (:country csv)\n                                  :county              (:county csv)\n                                  :fullName            (:fullName csv)\n                                  :shortName           (:shortName csv)\n                                  :companyForm         (:companyForm csv)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv)}]\n                                  :establishedAt       (:establishedAt csv)\n                                  :managerName         (:managerName csv)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv)\n                                                         :addressRef    (:addressRef csv)\n                                                         :zip           (:zip csv)\n                                                         :city          (:city csv)\n                                                         :streetAddress (:streetAddress csv)\n                                                         :country       (:country csv)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv)\n                                                         :phoneNumber  (:phoneNumber csv)\n                                                         :fax          (boolean (:fax csv))\n                                                         :emailAddress (:emailAddress csv)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv)\n                                                         :number          (:bankAccountNumber csv)\n                                                         :bankAccountType (:bankAccountType csv)\n                                                         :bankFullName    (:bankFullName csv)\n                                                         :bankShortName   (:bankShortName csv)\n                                                         :bankAddress     (:bankAddress csv)\n                                                         :bankSwiftCode   (:bankSwiftCode csv)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(json/generate-string (create-partner-maps ober-path))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map #((let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string %)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;))) partners)))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map (fn [partner] (let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string partner)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;))) partners)))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [partners (create-partner-maps partner-path)]\n    (map #(let [resp\n                 @(http/request\n                    {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n                     :method  :post\n                     :body    (json/generate-string %)\n                     :headers {\&quot;X-Auth-Token\&quot; authToken \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n             (get (json/parse-string (get resp :body)) \&quot;messages\&quot;)) partners)))&quot; &quot;(#(+ %1 %2) 5 10)&quot; &quot;(csv-in ober-path)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:insuranceCompanyCode csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (:bankAccountNumber csv-element)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(create-partner-maps ober-path)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (:bankAccountNumber csv-element)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(create-partner korteheni ober-path)&quot; &quot;partner-csv&quot; &quot;(csv-in \&quot;resources/csv/agents.csv\&quot;)&quot; &quot;(true? nil)&quot; &quot;(doc cond)&quot; &quot;(type (create-partner-maps partner-csv))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (into {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret))) [] csv)]\n    maps))&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons (vector {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }}) ret)) [] csv)]\n    maps))&quot; &quot;(vector \&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }} ret)) [] csv)]\n    maps))&quot; &quot;(create-partner-maps partner-csv)&quot; &quot;(doc cons)&quot; &quot;(defn create-partner-maps\n  [path]\n  (let [csv (csv-in path)\n        maps (reduce\n               (fn [ret csv-element]\n                 (cons {:partner {\n                                  :partnerRef          (:partnerRef csv-element)\n                                  :partnerType         (:partnerType csv-element)\n                                  :specialType         (:specialType csv-element)\n                                  :messageLanguage     (:messageLanguage csv-element)\n                                  :isUser              (boolean (:isUser csv-element))\n                                  :isAgent             (boolean (:isAgent csv-element))\n                                  :isOrgUnit           (boolean (:isOrgUnit csv-element))\n                                  :country             (:country csv-element)\n                                  :county              (:county csv-element)\n                                  :fullName            (:fullName csv-element)\n                                  :shortName           (:shortName csv-element)\n                                  :companyForm         (:companyForm csv-element)\n                                  :externalIdentifiers [{:externalIdentifierType  \&quot;VAT_NUMBER\&quot;\n                                                         :externalIdentifierValue (:vatNumber csv-element)}\n                                                        {:externalIdentifierType  \&quot;REGISTER_NUMBER\&quot;\n                                                         :externalIdentifierValue (:registerNumber csv-element)}]\n                                  :establishedAt       (:establishedAt csv-element)\n                                  :managerName         (:managerName csv-element)\n                                  :addresses           [\n                                                        {:addressType   (:addressType csv-element)\n                                                         :addressRef    (:addressRef csv-element)\n                                                         :zip           (:zip csv-element)\n                                                         :city          (:city csv-element)\n                                                         :streetAddress (:streetAddress csv-element)\n                                                         :country       (:country csv-element)}]\n                                  :contacts            [\n                                                        {:contactType  (:contactType csv-element)\n                                                         :phoneNumber  (:phoneNumber csv-element)\n                                                         :fax          (boolean (:fax csv-element))\n                                                         :emailAddress (:emailAddress csv-element)}]\n                                  :bankAccountNumbers  [\n                                                        {:bankAccountRef  (:bankAccountRef csv-element)\n                                                         :number          (str/replace (:bankAccountNumber csv-element) #\&quot;-\&quot; \&quot;\&quot;)\n                                                         :bankAccountType (:bankAccountType csv-element)\n                                                         :bankFullName    (:bankFullName csv-element)\n                                                         :bankShortName   (:bankShortName csv-element)\n                                                         :bankAddress     (:bankAddress csv-element)\n                                                         :bankSwiftCode   (:bankSwiftCode csv-element)}]\n                                  }}\n                       (if (true? (:isAgent csv-element))\n                         (create-agent-map csv-element))ret)) [] csv)]\n    maps))&quot; &quot;(doc into)&quot; &quot;(defn send-json\n  [json-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string json-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #((send-json (create-partner-map %))\n           (if (true? (:isAgent %))\n             (send-json (create-agent-map %))\n             flat-csv)))))&quot; &quot;(send-json {:kez \&quot;lol\&quot;})&quot; &quot;(fn [])&quot; &quot;(#(%1 %2) \&quot;str1\&quot; \&quot;str2\&quot;)&quot; &quot;((fn [a b] a) \&quot;str1\&quot; \&quot;str2\&quot;)&quot; &quot;((fn [a b] a b) \&quot;str1\&quot; \&quot;str2\&quot;)&quot; &quot;(#((println %1) (println %2)) \&quot;str1\&quot; \&quot;str2\&quot;)&quot; &quot;(#(\n   (println %1)\n   (println %2)) \&quot;str1\&quot; \&quot;str2\&quot;)&quot; &quot;((fn [a b]\n   (println a)\n   b)\n  1 2)&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)\n    (json/parse-string resp)))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)\n    resp))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)\n    (println (:body resp))\n    resp))&quot; &quot;parse-string&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)\n    (println (json/parse-string (:body resp)))\n    resp))&quot; &quot;(json/parse-string)&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (let [tst (json/parse-string (:body resp))]\n      tst)\n    resp))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [{:keys [:body] :as resp}\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    resp))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [resp\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    resp))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [{:keys [body] :as resp}\n         @(http/request\n            {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n             :method  :post\n             :body    (json/generate-string map-to-send)\n             :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    resp))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #((let [{:keys [body] :as resp} (send-json (create-partner-map %))]\n           (if (true? (:isAgent %))\n             (send-json (create-agent-map % (get-in (json/parse-string body) [\&quot;partner\&quot; \&quot;partnerRef\&quot;]))) )))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map (fn [param1]\n           ((let [{:keys [body] :as resp} (send-json (create-partner-map param1))]\n              (if (true? (:isAgent param1))\n                (send-json (create-agent-map param1 (get-in (json/parse-string body) [:partner :partnerRef])))))))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map (fn [param1]\n           ((let [resp (send-json (create-partner-map param1))]\n              (if (true? (:isAgent param1))\n                (send-json (create-agent-map param1 (get-in (json/parse-string resp) [:partner :partnerRef])))))))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map (fn [param1]\n           ((let [resp (send-json (create-partner-map param1))\n                  body (json/parse-string (:body resp))]\n              (if (true? (:isAgent param1))\n                (send-json (create-agent-map param1 (get-in (json/parse-string resp) [:partner :partnerRef])))))))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #(((let [resp (send-json (create-partner-map %))\n                  body (json/parse-string (:body resp))]\n              (if (true? (:isAgent %))\n                (println \&quot;FUck\&quot;)))))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #(((let \n              [resp (send-json (create-partner-map %))\n                  body (json/parse-string (:body resp))]\n              (if (true? (:isAgent %))\n                (println \&quot;FUck\&quot;)))))\n             flat-csv)))&quot; &quot;(csv-in partner-csv)&quot; &quot;(type (csv-in partner-csv))&quot; &quot;(map println (csv-in partner-csv))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (doall (csv-in path-to-csv))]\n    (map #(((let\n              [resp (send-json (create-partner-map %))\n                  body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)) );;nullpointer exception-t dob\n                (println \&quot;FUck\&quot;)))))\n             flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (doall (csv-in path-to-csv))]\n    (map #(println %)\n         flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (doall (csv-in path-to-csv))]\n    (map #((let\n              [resp (send-json (create-partner-map %))\n               body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)))           ;;nullpointer exception-t dob a flat-csv második elemére\n                (println \&quot;FUck\&quot;))))\n         flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (doall (csv-in path-to-csv))]\n    (map #(let\n              [resp (send-json (create-partner-map %))\n               body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)))           ;;nullpointer exception-t dob a flat-csv második elemére\n                (println \&quot;FUck\&quot;)))\n         flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (doall (csv-in path-to-csv))]\n    (map #(let\n              [resp (send-json (create-partner-map %))\n               body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)))           ;;nullpointer exception-t dob a flat-csv második elemére\n                (println \&quot;fuck\&quot;))\n         flat-csv))))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #(let\n              [resp (send-json (create-partner-map %))\n               body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)))\n                (println \&quot;fuck\&quot;)))\n         flat-csv)))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [flat-csv (csv-in path-to-csv)]\n    (map #(let\n              [resp (send-json (create-partner-map %))\n               body (json/parse-string (:body resp))]\n              (if (true? (= \&quot;true\&quot; (:isAgent %)))\n                (send-json (create-agent-map % (get-in body [:partner :partnerRef])))))\n         flat-csv)))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [{:keys [body] :as resp}\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string map-to-send)\n            :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (pritln resp)\n    resp))&quot; &quot;(defn send-json\n  [map-to-send]\n  (let [{:keys [body] :as resp}\n        @(http/request\n           {:url     \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :method  :post\n            :body    (json/generate-string map-to-send)\n            :headers {\&quot;X-Auth-Token\&quot; korteheni \&quot;Content-Type\&quot; \&quot;application/json\&quot;}})]\n    (println resp)\n    resp))&quot; &quot;(doc comp)&quot; &quot;(doc contains?)&quot; &quot;((doc key)&quot; &quot;(doc key)&quot; &quot;(doc get)&quot; &quot;l&quot; &quot;(defn has-error?\n  [body]\n  (let [\n        messages (get body \&quot;messages\&quot;)]\n    (println messages)))&quot; &quot;(defn has-error?\n  [body]\n  (let [\n        messages (get body \&quot;messages\&quot;)]\n    messages))&quot; &quot;(defn has-error?\n  [body]\n  (let [\n        messages (get body \&quot;messages\&quot;)]\n    (println body)\n    messages))&quot; &quot;(ns nak-test00.core\n  (:require [org.httpkit.client :as http]\n            [clojure.data.csv :as csv]\n            [cheshire.core :as json]\n            [clojure.core]\n            [clojure.java.io :as io]\n            [clojure.walk :only keywordize-keys]\n            [clojure.string :as str :only replace])\n  (:gen-class))&quot; &quot;(defn login\n  [username password]\n  (let [request (merge common\n                       {:url  \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        :body (json/generate-string {:userName username :password password})})\n        resp @(http/request request)]\n    (println resp)\n    (get-in resp [:headers :x-auth-token])))&quot; &quot;(def korteheni (login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;))&quot; &quot;korteheni&quot; &quot;(defn login\n  [username password]\n  (let [request (merge common\n                       {:url  \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        :body (json/generate-string {:userName username :password password})})\n        resp @(http/request request)]\n    resp))&quot; &quot;(doc some)&quot; &quot;(defn login\n  [username password]\n  (let [resp @(http/request {\n                               :url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                               :method  :post\n                               :headers {\&quot;Content-Type\&quot; \&quot;application/json\&quot;}\n                               :body (json/generate-string {:userName username :password password})})]\n    resp))&quot; &quot;(login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;)&quot; &quot;(doc get-in)&quot; &quot;(doc if)&quot; &quot;(if \&quot;lol\&quot;\n  (println \&quot;ok\&quot;))&quot; &quot;(if \&quot;lol\&quot;\n  (println \&quot;ok\&quot;)\n  (println \&quot;no\&quot;))&quot; &quot;(if nil\n  (println \&quot;ok\&quot;)\n  (println \&quot;no\&quot;))&quot; &quot;(if false\n  (println \&quot;ok\&quot;)\n  (println \&quot;no\&quot;))&quot; &quot;(if true\n  (println \&quot;ok\&quot;)\n  (println \&quot;no\&quot;))&quot; &quot;(if 123\n  (println \&quot;ok\&quot;)\n  (println \&quot;no\&quot;))&quot; &quot;create-partner&quot; &quot;(defn has-error?\n  [body]\n  (let [messages (get body \&quot;messages\&quot;)]\n    messages))&quot; &quot;has-error?&quot; &quot;(println \&quot;lol\&quot;)&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [auth-token korteheni]\n    (if auth-token\n      (let [flat-csv (csv-in path-to-csv)]\n        (map #(let\n               [resp (json/parse-string (send-json auth-token (create-partner-map %)))]\n               (if (true?\n                     (and (= \&quot;true\&quot; (:isAgent %)) (comment (not (has-error? resp))) ))\n                 (send-json auth-token (create-agent-map % (get-in resp [\&quot;partner\&quot; \&quot;partnerRef\&quot;])))))\n             flat-csv)))))&quot; &quot;(defn create-partner\n  [path-to-csv]\n  (let [auth-token korteheni]\n    (if auth-token\n      (let [flat-csv (csv-in path-to-csv)]\n        (map #(let\n               [resp (json/parse-string (send-json auth-token (create-partner-map %)))]\n               (if (true?\n                     (and (= \&quot;true\&quot; (:isAgent %))  ))\n                 (send-json auth-token (create-agent-map % (get-in resp [\&quot;partner\&quot; \&quot;partnerRef\&quot;])))))\n             flat-csv)))))&quot; &quot;(create-partner partner-csv)&quot;], :remote []}}</component>
</project>