<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1457110789485">{:repl-history {:ide [], :local [&quot;(reduce (fn [ret [i1 i2]]\n          (hash-map i1 i2) ret)\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(reduce (fn [ret [i1 i2]]\n          (hash-map i1 i2))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(reduce (fn [ret [i1 i2]]\n          (megre (hash-map i1 i2) ret))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(reduce (fn [ret [i1] [i2]]\n          (merge (hash-map i1 i2) ret))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(reduce (fn [ret [[i1] [i2]]]\n          (merge (hash-map i1 i2) ret))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(reduce (fn [ret [i1 i2]]\n          (merge (hash-map i1 i2) ret))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(csv-in \&quot;resources/csv/cig_partner.csv\&quot;)&quot; &quot;[\&quot;asd\&quot; \&quot;fgh\&quot;]&quot; &quot;(vector (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(take 1 (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(seq (take 1 (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)))&quot; &quot;(reduce (fn [ret ([i1] [i2])]\n          (merge (hash-map i1 i2) ret))\n          {} (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))&quot; &quot;(let [v1 (first (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))])&quot; &quot;(let [v1 (first (csv-in \&quot;resources/csv/cig_partner.csv\&quot;))]\n  (println v1))&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (println v1))&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (println v1)\n  (println v2))&quot; &quot;(doc map)&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            (merge (hash-map i1 i2) ret))\n          {} v1))&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            (merge (hash-map i1 i2) ret))\n           v1 v2))&quot; &quot;(+ 1 2)&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            merge (hash-map i1 i2) ret)\n          {} v1 v2))&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            merge (hash-map i1 i2) ret)\n          v1 v2))&quot; &quot;(let [[v1 v2] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            (merge (hash-map i1 i2) ret))\n          {} v1 v2))&quot; &quot;(reduce (fn [ret [i1] [i2]]\n          (merge (hash-map i1 i2) ret))\n        {} v1 v2)&quot; &quot;(doc reduce)&quot; &quot;(let [[v1] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1] [i2]]\n            (merge (hash-map i1 i2) ret))\n          {} v1))&quot; &quot;(let [[v1] (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [[i1] [i2]]]\n            (merge (hash-map i1 i2) ret))\n          {} v1))&quot; &quot;(let [v1 (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [[i1] [i2]]]\n            (merge (hash-map i1 i2) ret))\n          {} v1))&quot; &quot;(let [v1 (csv-in \&quot;resources/csv/cig_partner.csv\&quot;)]\n  (reduce (fn [ret [i1 i2]]\n            (merge (hash-map i1 i2) ret))\n          {} v1))&quot; &quot;(csv-in ober-path)&quot; &quot;(let [tag val] csv-in cig-path)&quot; &quot;(let [[tag val] csv-in cig-path]\n  tag\n  val)&quot; &quot;(let [[tag val] (csv-in cig-path)]\n  tag\n  val)&quot; &quot;(csv-in cig-path)&quot; &quot;(let [[tag val] (csv-in cig-path)]\n  (println tag)\n  (println val))&quot; &quot;(let [[tag val] (csv-in cig-path)]\n  (merge (map hash-map tag val)))&quot; &quot;(let [[tag val] (csv-in cig-path) ret {}]\n  (map comp merge (ret hash-map tag val)))&quot; &quot;(let [[tag val] (csv-in cig-path) ret {}]\n  (map (comp merge (ret hash-map)) tag val))&quot; &quot;(let [[tag val] (csv-in cig-path)]\n  (map hash-map tag val))&quot; &quot;(defn csv-to-map\n  []\n  (let [[tag val] (csv-in cig-path)]\n  (map hash-map tag val)))&quot; &quot;(reduce (fn [ret element]\n          (merge ret element))\n        {} (fn []\n             (let [[tag val] (csv-in cig-path)]\n               (map hash-map tag val))))&quot; &quot;(reduce (fn [ret element]\n          (merge ret elements))\n        {} (fn []\n             (let [[tag val] (csv-in cig-path)]\n               (map hash-map tag val))))&quot; &quot;(reduce (fn [ret elements]\n          (merge ret elements))\n        {} (fn []\n             (let [[tag val] (csv-in cig-path)]\n               (map hash-map tag val))))&quot; &quot;(reduce (fn [ret element]\n          (merge ret element))\n        {} (csv-to-map))&quot; &quot;(def csv-to-map\n  (let [[tag val] (csv-in cig-path)]\n  (map hash-map tag val)))&quot; &quot;(reduce (fn [ret element]\n          (merge ret element))\n        {} csv-to-map)&quot; &quot;(def csv-to-maps\n  (reduce (fn [ret element]\n          (merge ret element))\n        {} csv-to-map))&quot; &quot;(csv-to-map)&quot; &quot;(def csv-to-maps\n  (let [[tag val] (csv-in cig-path)]\n  (map hash-map tag val)))&quot; &quot;(csv-to-maps)&quot; &quot;csv-to-map&quot; &quot;csv-to-maps&quot; &quot;(def csv-to-map\n  (reduce (fn [ret element]\n          (merge ret element))\n        {} csv-to-map))&quot; &quot;(def body-to-send\n  (reduce (fn [ret element]\n          (merge ret element))\n        {} csv-to-map))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body body-to-send\n            :header {\&quot;X-Auth_Token\&quot; authToken}})))&quot; &quot;(defn csv-in\n  [path]\n  (csv/read-csv (io/reader path)))&quot; &quot;(defn csv-to-maps\n  [path]\n  (let [[tag val] (csv-in path)]\n  (map hash-map tag val)))&quot; &quot;(defn partner-csv\n  [path]\n  (reduce (fn [ret element]\n          (merge ret element))\n        {} (csv-to-map path)))&quot; &quot;(defn partner-csv\n  [path]\n  (reduce (fn [ret element]\n          (merge ret element))\n        {} (csv-to-maps path)))&quot; &quot;(create-partner login cig-path)&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (partner-csv cig-path)\n            :header {\&quot;X-Auth_Token\&quot; authToken}})))&quot; &quot;(create-partner (login \&quot;korteheni\&quot;) (partner-csv cig-path))&quot; &quot;(create-partner (login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;) (partner-csv cig-path))&quot; &quot;(json/write-str {:userName \&quot;username\&quot; :password \&quot;password\&quot;})&quot; &quot;(partner-csv cig-path)&quot; &quot;(json/write-str (partner-csv cig-path))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (json/write-str (partner-csv cig-path))\n            :header {\&quot;X-Auth_Token\&quot; authToken}})))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}]\n  @(http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (json/write-str (partner-csv cig-path))\n            :header {\&quot;X-Auth_Token\&quot; authToken}}))))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n  @(http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (json/write-str (partner-csv cig-path))\n            :header {\&quot;X-Auth_Token\&quot; authToken}}))]))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n  @(http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (json/write-str (partner-csv cig-path))\n            :header {\&quot;X-Auth_Token\&quot; authToken}}))]\n    body))&quot; &quot;(login \&quot;korte\&quot; \&quot;dd\&quot;)&quot; &quot;(defn login [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n  (:authToken (json/read-json body))\n  body))&quot; &quot;(ns nak-test00.core\n  (:require [org.httpkit.client :as http]\n            [clojure.data.csv :as csv]\n            [clojure.data.json :as json]\n            [clojure.core]\n            [clojure.java.io :as io])\n  (:gen-class))&quot; &quot;(def common {:method :post\n             :headers {\&quot;Content-Type\&quot; \&quot;application/json\&quot;}})&quot; &quot;(def cig-path \&quot;resources/csv/cig_partner.csv\&quot;)&quot; &quot;(def ober-path \&quot;resources/csv/ober_partner.csv\&quot;)&quot; &quot;(defn login [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n  (:authToken (json/read-json body))))&quot; &quot;(defn login [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))] \n    resp\n    (:authToken (json/read-json body))))&quot; &quot;(defn login [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    resp\n    ))&quot; &quot;(defn login \n  [username password]\n  ((let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    resp)))&quot; &quot;(login \&quot;fa\&quot; \&quot;sdf\&quot;)&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    resp))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (println resp)))&quot; &quot;(login \&quot;we\&quot; \&quot;we\&quot;)&quot; &quot;(cr)&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    :authToken body))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (println (:authToken body))))&quot; &quot;(login \&quot;zoli\&quot;)&quot; &quot;(login \&quot;111\&quot; \&quot;222\&quot;)&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    body))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (:authToken body)))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (:authToken (json/read-str body))))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    ((json/read-str body))))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (json/read-str body)))&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (json/read-str body :key-fn keyword)))&quot; &quot;(doc keyword)&quot; &quot;(keyword \&quot;lol\&quot;)&quot; &quot;(login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;)&quot; &quot;(defn login\n  [username password]\n  (let [{:keys [body] :as resp}\n      @(http/request\n         (merge common\n                {:url \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                 :body (json/write-str {:userName username :password password})}))]\n    (:authToken (json/read-str body :key-fn keyword))))&quot; &quot;(defn create-partner\n  [authToken partner-path]\n  (let [{:keys [body] :as resp}\n  @(http/request\n    (merge common\n           {:url \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n            :body (partner-csv cig-path)\n            :header {\&quot;X-Auth_Token\&quot; authToken}}))]\n    (println body)))&quot; &quot;(create-partner (login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;) cig-path)&quot;], :remote []}}</component>
</project>