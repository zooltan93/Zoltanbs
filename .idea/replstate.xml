<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1456854474609">{:repl-history {:ide [], :local [&quot;(def auth-token\n  (get-in (keywordize-keys login)\n          [headers X-Auth-Token]))&quot; &quot;(def auth-token\n  (get-in (keywordize-keys login)\n          [:headers :X-Auth-Token]))&quot; &quot;(def auth-token\n  (get-in (keywordize-keys login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;)\n          [:headers :X-Auth-Token]))&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;partner.txt\&quot;)\n  )&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;.partner.txt\&quot;))&quot; &quot;(doc slurp)&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;nak_test00/partner.txt\&quot;))&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;core.clj\&quot;))&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;http://clojuredocs.org\&quot;))&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;partner.txt\&quot;))&quot; &quot;(defn create-partner\n  []\n  (keywordize-keys (slurp \&quot;resources/partner.txt\&quot;)))&quot; &quot;(defn create-partner\n  []\n  (slurp \&quot;resources/partner.txt\&quot;))&quot; &quot;(require 'clojure.string)&quot; &quot;(alias 'string 'clojure.string)&quot; &quot;(defn create-partner\n  []\n  (string/trim (slurp \&quot;resources/partner.txt\&quot;)))&quot; &quot;(defn create-partner\n  []\n  (string/split (slurp \&quot;resources/partner.txt\&quot;)))&quot; &quot;(doc split)&quot; &quot;(doc clojure.string/split)&quot; &quot;(defn create-partner\n  []\n  (string/split (slurp \&quot;resources/partner.txt\&quot;) \&quot; \&quot;))&quot; &quot;(defn create-partner\n  []\n  (string/split (slurp \&quot;resources/partner.txt\&quot;) #\&quot; \&quot;))&quot; &quot;(defn create-partner\n  []\n  (string/split (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s\&quot;))&quot; &quot;(defn create-partner\n  []\n  (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))&quot; &quot;(create-partner)&quot; &quot;(defn create-partner-data\n  (keywordize-keys (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;)))&quot; &quot;(defn create-partner-data\n  (keywordize-keys (split (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;)))&quot; &quot;(defn create-partner-data\n  ((split (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;)))&quot; &quot;(defn create-partner-data\n  (((string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;)))&quot; &quot;(defn create-partner-data\n  (((string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot;) \&quot; \&quot;)))&quot; &quot;(defn create-partner-data\n  (((string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))))&quot; &quot;(defn create-partner-data\n  (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))&quot; &quot;(defn create-partner-data\n  []\n  (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))&quot; &quot;(def create-partner-data\n  (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))&quot; &quot;(create-partner-data)&quot; &quot;(def create-partner-data\n  (split (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;))&quot; &quot;(def create-partner-data\n  (string/split (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;))&quot; &quot;(def create-partner-data\n  (keywordize-keys (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;) #\&quot; \&quot;))&quot; &quot;(def auth-token\n  (get-in (keywordize-keys (login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;))\n          [:headers :X-Auth-Token]))&quot; &quot;(defn login\n  [username password]\n  (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName username :password password}\n                         :content-type :json}))&quot; &quot;\&quot;Krumpli10\&quot;&quot; &quot;(loing \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;)&quot; &quot;(client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n             {:form-params {:userName username :password password}\n              :content-type :json})&quot; &quot;(login \&quot;sdf\&quot; \&quot;sdf\&quot;)&quot; &quot;(login \&quot;korteheni\&quot; \&quot;Krumpli0\&quot;)&quot; &quot;(login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;)&quot; &quot;(def auth-token\n  (get-in (login \&quot;korteheni\&quot; \&quot;Krumpli10\&quot;) [:headers :X-Auth-Token]))&quot; &quot;(auth-token)&quot; &quot;(string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot;)&quot; &quot;(string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,} \&quot; \&quot;)&quot; &quot;create-partner&quot; &quot;(println create-partner)&quot; &quot;(println create-partner-data)&quot; &quot;(string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;)&quot; &quot;(def create-partner-data\n  (keywordize-keys (string/replace (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;)))&quot; &quot;(slurp \&quot;resources/partner.txt\&quot;)&quot; &quot;(def create-partner-data\n  (json/parse-string (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot; \&quot; \&quot;))&quot; &quot;(def create-partner-data\n  (json/parse-string (slurp \&quot;resources/partner.txt\&quot;) #\&quot;\\s{2,}\&quot;))&quot; &quot;(def create-partner-data\n  (json/parse-string (slurp \&quot;resources/partner.txt\&quot;)))&quot; &quot;(def create-partner-data\n  (json/parse-string (slurp \&quot;resources/partner.txt\&quot;) true))&quot; &quot;(send-to (create-partner-data))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot; {:form-params partner-data}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot; {:form-params partner-data\n                                                                        :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; auth-token}\n               :content-type :json}))&quot; &quot;(def create-partner-data\n  (slurp \&quot;resources/partner.txt\&quot;) true)&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://localhost:8080/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; auth-token}\n               :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://localhost:8080/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token:\&quot; auth-token}\n               :content-type :json}))&quot; &quot;auth-token&quot; &quot;(defn login\n  [username password]\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json}))\n  [:header :X-Auth-Token])&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json}))\n  [:header :X-Auth-Token])&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:header :X-Auth-Token]))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:header :X-Auth-Token] \&quot;Not\&quot;))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:header :X-Auth-Token] \&quot;Cant login\&quot;))&quot; &quot;(client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n             {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n              :content-type :json})&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login\&quot;))&quot; &quot;(def create-partner-data\n  (slurp \&quot;resources/partner.txt\&quot;))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://localhost:8080/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token:\&quot; auth-token}\n               :content-type :json\n                :accept :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token:\&quot; auth-token}\n               :content-type :json\n                :accept :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; auth-token}\n               :content-type :json\n                :accept :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json\n                :accept :json}))&quot; &quot;(send-to create-partner-data)&quot; &quot;create-partner-data&quot; &quot;(def partner-data\n  (slurp \&quot;resources/partner.txt\&quot;))&quot; &quot;(client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n             {:body \&quot;{\\\&quot;userName\\\&quot;: \\\&quot;kortheni\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;Krumpli10\\\&quot;\&quot;\n              :content-type :json})&quot; &quot;(client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n             {:body \&quot;{\\\&quot;userName\\\&quot;: \\\&quot;kortheni\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;Krumpli10\\\&quot;\&quot;\n              :headers {\&quot;X-Auth-Token\&quot; login}\n              :content-type :json})&quot; &quot;partner-data&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}\n               {:debug true}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:debug true}\n               {:body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot; {:debug true :debug-body true}\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login.\&quot;))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login.\&quot;))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot; {:debug true}\n                        {:form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login.\&quot;))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:debug true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:debug true\n                         :form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login.\&quot;))&quot; &quot;(defn login\n  []\n  (get-in (client/post \&quot;http://nak-test.dbx.hu/api/auth/v1/users/authenticate\&quot;\n                        {:debug true :debug-body true\n                         :form-params {:userName \&quot;korteheni\&quot; :password \&quot;Krumpli10\&quot;}\n                         :content-type :json})\n  [:headers :X-Auth-Token] \&quot;Cant login.\&quot;))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               ;;:content-type :json;;\n               }))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; (login)}\n               :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; login}\n               :content-type :json}))&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; (login)}\n               :content-type :json}))&quot; &quot;(login)&quot; &quot;(defn send-to\n  [partner-data]\n  (client/post \&quot;http://nak-test.dbx.hu/api/partner/partners\&quot;\n               {:debug true :debug-body true\n                :body partner-data\n               :headers {\&quot;X-Auth-Token\&quot; (login)}\n               :content-type :json}))&quot; &quot;(send-to partner-data)&quot;], :remote []}}</component>
</project>